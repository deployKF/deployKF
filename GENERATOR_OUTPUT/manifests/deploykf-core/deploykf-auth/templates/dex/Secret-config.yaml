apiVersion: v1
kind: Secret
metadata:
  name: dex-config
  labels:
    helm.sh/chart: {{ include "deploykf-auth.labels.chart" . }}
    app.kubernetes.io/name: {{ include "deploykf-auth.labels.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: dex

## TODO: ensure kubernetes is happy when no keys are passed under `data`
## removable keys must use `data` rather than `stringData` (see: https://github.com/helm/helm/issues/10010)
data:
  {{- if not .Values.dex.staticPasswords.existingSecret }}
  ## used to set `CONFIG__STATIC_PASSWORDS`
  static_passwords: {{ .Values.dex.staticPasswords.value | toYaml | b64enc | quote }}
  {{- end }}

  {{- if not .Values.dex.connectors.existingSecret }}
  ## used to set `CONFIG__CONNECTORS`
  connectors: {{ .Values.dex.connectors.value | toYaml | b64enc | quote }}
  {{- end }}

stringData:
  ## this file is able to use gomplate templating because of the `/entrypoint.sh` in the dex container image
  ## note, we have used the custom delimiters of "<<" and ">>" as not to interfere with helm templates
  ## (see: https://docs.gomplate.ca/)
  config.yaml: |
    ## the base path of dex and the external name of the OpenID Connect service
    {{- if .Values.deployKF.gateway.tls.enabled }}
    issuer: "https://{{ .Values.deployKF_helpers.deploykf_gateway.https_endpoint }}/dex"
    {{- else }}
    issuer: "http://{{ .Values.deployKF_helpers.deploykf_gateway.http_endpoint }}/dex"
    {{- end }}

    ## configs for how dex stores its state
    storage:
      type: kubernetes
      config:
        inCluster: true

    ## configs for the web endpoints
    web:
      http: 0.0.0.0:5556

    ## configs for the telemetry endpoints
    telemetry:
      http: 0.0.0.0:5558

    ## configs for the UI
    frontend:
      issuer: dex
      logoURL: theme/logo.png
      dir: ""
      theme: light

    ## configs for logging
    logger:
      level: info
      format: text

    ## configs for token/key expiration
    expiry:
      ## the duration of time for which the DeviceRequests will be valid
      deviceRequests: "5m"

      ## the duration of time for which the IdTokens will be valid
      idTokens: "24h"

      ## the duration of time after which the SigningKeys will be rotated
      signingKeys: "6h"

      ## refresh tokens expiry policy
      refreshTokens:
        ## interval within which old refresh token is allowed to be reused
        reuseInterval: "3s"

        ## interval from last token update to the end of its life
        validIfNotUsedFor: "72h" # 3 days

        ## interval from token creation to the end of its life
        absoluteLifetime: "720h" # 30 days

    ## configs for oauth2
    oauth2:
      responseTypes: ["code", "token", "id_token"]
      skipApprovalScreen: true

    ## configs for OpenID clients of dex
    staticClients:

      ## the OpenID client for "OAUTH2 Proxy"
      - name: "OAUTH2 Proxy"
        id: {{ .Values.dex.clients.oauth2Proxy.clientId | quote }}
        {{- if .Values.dex.clients.oauth2Proxy.clientSecret.existingSecret }}
        secret: << getenv "CONFIG__CLIENT_SECRET__OAUTH2_PROXY" | quote >>
        {{- else }}
        secret: {{ .Values.dex.clients.oauth2Proxy.clientSecret.value | quote }}
        {{- end }}
        redirectURIs:
          {{- if .Values.deployKF.gateway.tls.enabled }}
          - "https://{{ .Values.deployKF_helpers.deploykf_gateway.https_endpoint }}/oauth2/callback"
          {{- else }}
          - "http://{{ .Values.deployKF_helpers.deploykf_gateway.http_endpoint }}/oauth2/callback"
          {{- end }}

      {{ if .Values.dex.clients.minio.enabled -}}
      ## the OpenID client for "Minio"
      - name: "Minio"
        id: {{ .Values.dex.clients.minio.clientId | quote }}
        {{- if .Values.dex.clients.minio.clientSecret.existingSecret }}
        secret: << getenv "CONFIG__CLIENT_SECRET__MINIO" | quote >>
        {{- else }}
        secret: {{ .Values.dex.clients.minio.clientSecret.value | quote }}
        {{- end }}
        redirectURIs:
        {{- if .Values.deployKF.gateway.tls.enabled }}
          - "https://minio-console.{{ .Values.deployKF_helpers.deploykf_gateway.https_endpoint }}/oauth_callback"
        {{- else }}
          - "http://minio-console.{{ .Values.deployKF_helpers.deploykf_gateway.http_endpoint }}/oauth_callback"
        {{- end }}
      {{- end }}

      {{ if .Values.dex.clients.argoServer.enabled -}}
      ## the OpenID client for "argo-server"
      - name: "Argo Server"
        id: {{ .Values.dex.clients.argoServer.clientId | quote }}
        {{- if .Values.dex.clients.argoServer.clientSecret.existingSecret }}
        secret: << getenv "CONFIG__CLIENT_SECRET__ARGO_SERVER" | quote >>
        {{- else }}
        secret: {{ .Values.dex.clients.argoServer.clientSecret.value | quote }}
        {{- end }}
        redirectURIs:
        {{- if .Values.deployKF.gateway.tls.enabled }}
          - "https://argo-server.{{ .Values.deployKF_helpers.deploykf_gateway.https_endpoint }}/oauth2/callback"
        {{- else }}
          - "http://argo-server.{{ .Values.deployKF_helpers.deploykf_gateway.http_endpoint }}/oauth2/callback"
        {{- end }}
      {{- end }}

    ## configs for upstream identity providers for authenticating users
    <<- if (getenv "CONFIG__CONNECTORS" | yamlArray) >>
    connectors:
    << getenv "CONFIG__CONNECTORS" | yamlArray | toYAML | indent 2 >>
    <<- else >>
    connectors: []
    <<- end >>

    ## must be `true` if `staticPasswords` are provided
    <<- if (getenv "CONFIG__STATIC_PASSWORDS" | yamlArray) >>
    enablePasswordDB: true
    <<- else >>
    enablePasswordDB: false
    <<- end >>

    ## a list of static credentials
    <<- if (getenv "CONFIG__STATIC_PASSWORDS" | yamlArray) >>
    staticPasswords:
    << getenv "CONFIG__STATIC_PASSWORDS" | yamlArray | toYAML | indent 2 >>
    <<- else >>
    staticPasswords: []
    <<- end >>