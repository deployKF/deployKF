########################################
## SHARED | deploykf-helpers
########################################
deployKF_helpers:
  deploykf_gateway:
    http_endpoint: "deploykf.example.com:8080"
    https_endpoint: "deploykf.example.com:8443"
    is_self_signed_cert: true

  scripts:
    generate_kubernetes_secret__sh: "#!/usr/bin/env bash\n\n## This script is used by jobs which generate kubernetes secrets if they are not already present.\n##\n## It reads the following environment variables:\n##  - SECRET_NAME: the name of the secret to generate\n##  - SECRET_KEYS: a JSON object whose keys are the names of the keys in the secret, and values are objects with the following properties:\n##    - \"length\": the length of the value to generate (default: 32)\n##    - \"characters\": a JSON object with the following properties: (default: all false)\n##       - \"lowercase\": if the generated value can contain lowercase letters: a-z\n##       - \"uppercase\": if the generated value can contain uppercase letters: A-Z\n##       - \"special\": if the generated value can contain special characters: !@#$%^&*()_-=+[]{}\\|;:'\",.<>/?`~\n##    - \"base64\": a JSON object with the following properties:\n##       - \"encode\": if the generated value will be base64 encoded (default: false)\n##       - \"url_safe\": if the alternate \"URL and Filename safe\" RFC 4648 encoding is used (default: false)\n##       - \"remove_pad\": if padding characters are removed from the encoded value (default: false)\n##  - SECRET_LABEL: the label used to identify previously generated secrets\n##  - SECRET_EXTRA_LABELS: a JSON object whose keys and values are used as additional labels on the secret\n##  - SECRET_EXTRA_ANNOTATIONS: a JSON object whose keys and values are used as additional annotations on the secret\n\nset -eou pipefail\n\n#######################################\n## Functions\n#######################################\n\n## generate a secure random value of a given length and character set\n## NOTE: characters are chosen with uniform distribution from the character set\nfunction generate_random_value() {\n  local _length=\"$1\"\n  local _charset_has_lowercase=\"$2\"\n  local _charset_has_uppercase=\"$3\"\n  local _charset_has_numbers=\"$4\"\n  local _charset_has_special=\"$5\"\n  local _base64_encode=\"$6\"\n  local _base64_url_safe=\"$7\"\n  local _base64_remove_pad=\"$8\"\n\n  ## initialize return value\n  ## NOTE: this is a global variable\n  random_value=\"\"\n\n  ## define the character set\n  local _charset=\"\"\n  if [[ \"$_charset_has_numbers\" == \"true\" ]]; then\n    _charset+='0123456789'\n  fi\n  if [[ \"$_charset_has_lowercase\" == \"true\" ]]; then\n    _charset+='abcdefghijklmnopqrstuvwxyz'\n  fi\n  if [[ \"$_charset_has_uppercase\" == \"true\" ]]; then\n    _charset+='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  fi\n  if [[ \"$_charset_has_special\" == \"true\" ]]; then\n    _charset+='!@#$%^&*()_-=+[]{}\\|;:,.<>/?`~'\n    _charset+=\"'\"\n    _charset+='\"'\n  fi\n\n  ## calculate the length of the character set\n  local _charset_length\n  _charset_length=${#_charset}\n\n  ## check if the character set is empty\n  if [[ \"$_charset_length\" == \"0\" ]]; then\n    echo \"ERROR: character set may not be empty\"\n    exit 1\n  fi\n\n  ## calculate the maximum value that is evenly divisible by charset length\n  ## NOTE: this is used to avoid modulo bias making the earlier characters more likely\n  ##       by disregarding random values larger than this\n  ## NOTE: division of integers in bash is equivalent to floor division\n  local _max_int\n  _max_int=$(((255 / _charset_length) * _charset_length))\n\n  ## the number of random bytes to read in each batch\n  local _batch_size=1024\n\n  local -a _result=()\n  local _random_ints\n  local _int\n  local _char_index\n\n  while ((${#_result[@]} < _length)); do\n    ## read a batch of random bytes and convert them to unsigned integers\n    ## NOTE: the resulting integers will be in the range [0, 255]\n    _random_ints=($(od -v -A n -t u1 -N $_batch_size /dev/urandom))\n\n    ## iterate over the random integers\n    for _int in \"${_random_ints[@]}\"; do\n\n      ## only use this random value if it's smaller than the maximum value\n      if ((_int < _max_int)); then\n\n        ## get a valid index in the character set using modulo\n        ## NOTE: the index will be in the range [0, _charset_length)\n        _char_index=$((_int % _charset_length))\n        _result+=(\"${_charset:_char_index:1}\")\n\n        ## break if we have enough characters\n        if ((${#_result[@]} == _length)); then\n          break\n        fi\n      fi\n    done\n  done\n\n  ## construct the final string from the array of characters\n  random_value=$(printf \"%s\" \"${_result[@]}\")\n\n  ## if base64 encoding is requested, encode the random value\n  if [[ \"$_base64_encode\" == \"true\" ]]; then\n    random_value=$(echo -n \"$random_value\" | base64)\n\n    ## if requested, use the \"URL and Filename safe\" encoding\n    if [[ \"$_base64_url_safe\" == \"true\" ]]; then\n      random_value=$(echo -n \"$random_value\" | tr '+/' '-_')\n    fi\n\n    ## if requested, remove padding characters\n    if [[ \"$_base64_remove_pad\" == \"true\" ]]; then\n      random_value=$(echo -n \"$random_value\" | tr -d '=')\n    fi\n  fi\n}\n\n## read a kubernetes secret and extract its data and labels into associative arrays\nfunction read_kube_secret() {\n  local _secret_name=\"$1\"\n\n  ## unset the associative array return values\n  unset secret_data\n  unset secret_labels\n\n  ## initialize return values\n  ## NOTE: these are global variables\n  secret_exists=\"\"\n  declare -gA secret_data\n  declare -gA secret_labels\n\n  ## get the secret\n  local _secret\n  _secret=$(kubectl get secret \"$_secret_name\" -o json 2>/dev/null || echo \"\")\n\n  ## check if the secret exists\n  if [[ -z \"$_secret\" ]]; then\n    secret_exists=\"false\"\n  else\n    secret_exists=\"true\"\n\n    ## populate the secret_data associative array (base64 decoded)\n    local _key\n    local _value\n    for _key in $(echo \"$_secret\" | jq -r '.data // empty | keys[]'); do\n      _value=$(echo \"$_secret\" | jq -r --arg k \"$_key\" '.data[$k]')\n      secret_data[\"$_key\"]=$(echo \"$_value\" | base64 --decode)\n    done\n\n    ## populate the secret_labels associative array\n    for _key in $(echo \"$_secret\" | jq -r '.metadata.labels // empty | keys[]'); do\n      _value=$(echo \"$_secret\" | jq -r --arg k \"$_key\" '.metadata.labels[$k]')\n      secret_labels[\"$_key\"]=\"$_value\"\n    done\n  fi\n}\n\n## generate a secret and write it to kubernetes\nfunction generate_kube_secret() {\n  local _secret_name=\"$1\"\n  local _secret_keys=\"$2\"\n  local _secret_label=\"$3\"\n  local _secret_extra_labels=\"$4\"\n  local _secret_extra_annotations=\"$5\"\n  local _delete_existing=\"$6\"\n\n  ## unset the associative array return values\n  unset generated_secret_data\n\n  ## initialize return values\n  ## NOTE: these are global variables\n  declare -gA generated_secret_data\n\n  ## delete the existing secret if requested\n  if [[ \"$_delete_existing\" == \"true\" ]]; then\n    echo \"WARNING: deleting existing secret '$_secret_name'\"\n    kubectl delete secret \"$_secret_name\"\n  fi\n\n  ## populate the generated_secret_data associative array with random values\n  local _key_name\n  local _key_configs\n  local _length\n  local _characters\n  local _characters_lowercase\n  local _characters_uppercase\n  local _characters_numbers\n  local _characters_special\n  local _base64\n  local _base64_encode\n  local _base64_url_safe\n  local _base64_remove_pad\n  for _key_name in $(echo \"$_secret_keys\" | jq -r '. // empty | keys[]'); do\n    ## unpack the key configurations\n    _key_configs=$(echo \"$_secret_keys\" | jq -r --arg k \"$_key_name\" '.[$k]')\n    _length=$(echo \"$_key_configs\" | jq -r '.length // 32')\n    _characters=$(echo \"$_key_configs\" | jq -r '.characters // empty')\n    _characters_lowercase=$(echo \"$_characters\" | jq -r '.lowercase // false')\n    _characters_uppercase=$(echo \"$_characters\" | jq -r '.uppercase // false')\n    _characters_numbers=$(echo \"$_characters\" | jq -r '.numbers // false')\n    _characters_special=$(echo \"$_characters\" | jq -r '.special // false')\n    _base64=$(echo \"$_key_configs\" | jq -r '.base64 // empty')\n    _base64_encode=$(echo \"$_base64\" | jq -r '.encode // false')\n    _base64_url_safe=$(echo \"$_base64\" | jq -r '.url_safe // false')\n    _base64_remove_pad=$(echo \"$_base64\" | jq -r '.remove_pad // false')\n\n    ## generate and store the random value\n    echo \"INFO: generating random value for key '$_key_name' with length '$_length' (characters: lowercase=$_characters_lowercase,uppercase=$_characters_uppercase,numbers=$_characters_numbers,special=$_characters_special; base64: encode=$_base64_encode,url_safe=$_base64_url_safe,remove_pad=$_base64_remove_pad)\"\n    generate_random_value \"$_length\" \"$_characters_lowercase\" \"$_characters_uppercase\" \"$_characters_numbers\" \"$_characters_special\" \"$_base64_encode\" \"$_base64_url_safe\" \"$_base64_remove_pad\"\n    generated_secret_data[\"$_key_name\"]=\"$random_value\"\n  done\n\n  ## build an array of `--from-literal` arguments\n  local -a _from_literal_args=()\n  for _key_name in \"${!generated_secret_data[@]}\"; do\n    _from_literal_args+=(\"--from-literal=$_key_name=${generated_secret_data[$_key_name]}\")\n  done\n\n  ## build an array of annotation name=value arguments\n  local -a _annotation_pair_args=()\n  local _annotation_name\n  local _annotation_value\n  for _annotation_name in $(echo \"$_secret_extra_annotations\" | jq -r '. // empty | keys[]'); do\n    _annotation_value=$(echo \"$_secret_extra_annotations\" | jq -r --arg k \"$_annotation_name\" '.[$k]')\n    _annotation_pair_args+=(\"$_annotation_name=$_annotation_value\")\n  done\n\n  ## build an array of label name=value arguments\n  local -a _label_pair_args=()\n  local _label_name\n  local _label_value\n  for _label_name in $(echo \"$_secret_extra_labels\" | jq -r '. // empty | keys[]'); do\n    _label_value=$(echo \"$_secret_extra_labels\" | jq -r --arg k \"$_label_name\" '.[$k]')\n    _label_pair_args+=(\"$_label_name=$_label_value\")\n  done\n\n  ## use the current epoch time as the generated secret label value\n  local _current_epoch\n  _current_epoch=$(date +%s)\n  _label_pair_args+=(\"$_secret_label=$_current_epoch\")\n\n  ## create the secret\n  kubectl create secret generic \"$_secret_name\" \\\n    \"${_from_literal_args[@]}\" --dry-run=client -o yaml |\n    kubectl label --local -f - --dry-run=client -o yaml \"${_label_pair_args[@]}\" |\n    kubectl annotate --local -f - --dry-run=client -o yaml \"${_annotation_pair_args[@]}\" |\n    kubectl apply -f -\n}\n\n#######################################\n## Main\n#######################################\n\n## verify that the required environment variables are set\nif [[ -z \"${SECRET_NAME:-}\" ]]; then\n  echo \"ERROR: environment variable SECRET_NAME is not set\"\n  exit 1\nfi\nif [[ -z \"${SECRET_KEYS:-}\" ]]; then\n  echo \"ERROR: environment variable SECRET_KEYS is not set\"\n  exit 1\nfi\nif [[ -z \"${SECRET_LABEL:-}\" ]]; then\n  echo \"ERROR: environment variable SECRET_LABEL is not set\"\n  exit 1\nfi\nif [[ -z \"${SECRET_EXTRA_LABELS:-}\" ]]; then\n  echo \"ERROR: environment variable SECRET_EXTRA_LABELS is not set\"\n  exit 1\nfi\nif [[ -z \"${SECRET_EXTRA_ANNOTATIONS:-}\" ]]; then\n  echo \"ERROR: environment variable SECRET_EXTRA_ANNOTATIONS is not set\"\n  exit 1\nfi\n\n## verify that environment variables contain valid json\nif ! jq -e . >/dev/null 2>&1 <<<\"$SECRET_KEYS\"; then\n  echo \"ERROR: environment variable SECRET_KEYS does not contain valid JSON\"\n  exit 1\nfi\nif ! jq -e . >/dev/null 2>&1 <<<\"$SECRET_EXTRA_LABELS\"; then\n  echo \"ERROR: environment variable SECRET_EXTRA_LABELS does not contain valid JSON\"\n  exit 1\nfi\nif ! jq -e . >/dev/null 2>&1 <<<\"$SECRET_EXTRA_ANNOTATIONS\"; then\n  echo \"ERROR: environment variable SECRET_EXTRA_ANNOTATIONS does not contain valid JSON\"\n  exit 1\nfi\n\n## read the secret\n## NOTE: this sets the global variables $secret_exists, $secret_data, $secret_labels\nread_kube_secret \"$SECRET_NAME\"\n\n## if the secret already exists, verify it\nif [[ \"$secret_exists\" == \"true\" ]]; then\n\n  ## check if the secret has the required keys\n  needs_update=\"false\"\n  for key_name in $(echo \"$SECRET_KEYS\" | jq -r '. // empty | keys[]'); do\n    if [[ ! -v \"secret_data[$key_name]\" ]]; then\n      echo \"WARNING: secret '$SECRET_NAME' exists but is missing key '$key_name'\"\n      needs_update=\"true\"\n    fi\n  done\n\n  ## if an update is required, ensure the secret has a label indicating it was created by this script\n  if [[ \"$needs_update\" == \"true\" ]]; then\n    if [[ -v \"secret_labels[$SECRET_LABEL]\" ]]; then\n      echo \"INFO: secret '$SECRET_NAME' is missing keys, re-generating...\"\n      generate_kube_secret \"$SECRET_NAME\" \"$SECRET_KEYS\" \"$SECRET_LABEL\" \"$SECRET_EXTRA_LABELS\" \"$SECRET_EXTRA_ANNOTATIONS\" \"true\"\n    else\n      echo \"ERROR: secret '$SECRET_NAME' does not have label '$SECRET_LABEL', so is not safe to update\"\n      exit 1\n    fi\n  else\n    echo \"INFO: secret '$SECRET_NAME' exists and has all required keys, skipping...\"\n  fi\n\n## if the secret does not exist, create it\nelse\n  echo \"INFO: secret '$SECRET_NAME' does not exist, generating...\"\n  generate_kube_secret \"$SECRET_NAME\" \"$SECRET_KEYS\" \"$SECRET_LABEL\" \"$SECRET_EXTRA_LABELS\" \"$SECRET_EXTRA_ANNOTATIONS\" \"false\"\nfi\n"


########################################
## SHARED | deploykf
########################################
deployKF:
  extraManifests:

  clusterDomain: cluster.local

  certManager:
    clusterIssuer:
      selfSigned:
        injectedConfigMapName: "deploykf-gateway-issuer-root-ca-cert"

  istio:
    namespace: "istio-system"

  gateway:
    namespace: "deploykf-istio-gateway"
    serviceAccount: "deploykf-gateway"
    name: "deploykf-gateway"
    hostname: "deploykf.example.com"
    tls:
      enabled: true


########################################
## COMPONENT | generate
########################################
generate:
  ## configs for the kubectl container image
  ##
  kubectlImage:
    repository: "docker.io/bitnami/kubectl"
    tag: "1.26.6-debian-11-r8"
    pullPolicy: "IfNotPresent"
    pullSecret: ""
    uid: 1000
    gid: 1000


########################################
## COMPONENT | dex
########################################
dex:
  ## configs for the dex container image
  ##
  image:
    repository: "ghcr.io/dexidp/dex"
    tag: "v2.37.0"
    pullPolicy: "IfNotPresent"
    pullSecret: ""
    uid: 1001
    gid: 1001

  ## resource requests/limits for the dex Pods
  ## - spec for ResourceRequirements:
  ##   https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#resourcerequirements-v1-core
  ##
  resources: {}

  ## log level for the dex container
  ##
  logLevel: "info"

  ## configs for token/key expiration
  ##
  expiry:
    deviceRequests: "5m"
    idTokens: "60m"
    signingKeys: "6h"
    refreshTokens:
      reuseInterval: "30s"
      validIfNotUsedFor: "168h"
      absoluteLifetime: "2160h"

  ## OpenID client configs for dex
  ##
  clients:

    ## OpenID client for oauth2-proxy
    ## - [WARNING] these configs must align with `oauth2Proxy.oidc.*`
    ##
    oauth2Proxy:
      clientId: "oauth2-proxy"
      clientSecret:
        value: "bbbbbbbbbbbbbbbb"
        existingSecret: "generated--dex-oauth2-proxy-client"
        existingSecretKey: "client_secret"
        generateSecret: true

    ## OpenID client for Minio Console
    ##
    minioConsole:
      enabled: true
      namespace: "deploykf-minio"
      clientId: "minio-console"
      clientSecret:
        value: "bbbbbbbbbbbbbbbb"
        existingSecret: "generated--dex-minio-console-client"
        existingSecretKey: "client_secret"
        generateSecret: true

    ## OpenID client for Argo Server
    ##
    argoServer:
      enabled: true
      namespace: "kubeflow-argo-workflows"
      clientId: "argo-server"
      clientSecret:
        value: "bbbbbbbbbbbbbbbb"
        existingSecret: "generated--dex-argo-server-client"
        existingSecretKey: "client_secret"
        generateSecret: true

  ## dex static passwords
  ##
  staticPasswords: [{"email":"admin@example.com","password":{"value":"admin"}},{"email":"user1@example.com","password":{"value":"user1"}},{"email":"user2@example.com","password":{"value":"user2"}}]

  ## dex connectors
  ##
  connectors: []


########################################
## COMPONENT | oauth2-proxy
########################################
oauth2Proxy:
  ## configs for the oauth2-proxy container image
  ##
  image:
    repository: "quay.io/oauth2-proxy/oauth2-proxy"
    tag: "v7.4.0"
    pullPolicy: "IfNotPresent"
    pullSecret: ""
    uid: 65532
    gid: 65532

  ## resource requests/limits for the oauth2-proxy Pods
  ## - spec for ResourceRequirements:
  ##   https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#resourcerequirements-v1-core
  ##
  resources: {}

  ## OpenID configs for oauth2-proxy
  ##
  oidc:
    clientId: "oauth2-proxy"
    clientSecret:
      value: "bbbbbbbbbbbbbbbb"
      existingSecret: "generated--dex-oauth2-proxy-client"
      existingSecretKey: "client_secret"

  ## cookie configs for oauth2-proxy
  ##
  cookie:
    name: "_deploykf_token"
    expire: "168h"
    refresh: "60m"
    csrf:
      expire: "15m"
      perRequest: true
    secret:
      value: "cccccccccccccccc"
      existingSecret: "generated--oauth2-proxy-cookie-secret"
      existingSecretKey: "cookie_secret"
      generateSecret: true
