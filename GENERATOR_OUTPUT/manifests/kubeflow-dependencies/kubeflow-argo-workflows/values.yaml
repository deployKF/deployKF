########################################
## SHARED | deploykf-helpers
########################################
deployKF_helpers:
  deploykf_gateway:
    http_endpoint: "deploykf.example.com:8080"
    https_endpoint: "deploykf.example.com:8443"
    is_self_signed_cert: true

  kubeflow_pipelines:
    use_embedded_minio: true
    object_store:
      hostname: "deploykf-minio-api.deploykf-minio.svc.cluster.local"
      port: "9000"
      endpoint: "deploykf-minio-api.deploykf-minio.svc.cluster.local:9000"
      not_use_ssl: true
      auth:
        source_secret_name: "generated--kubeflow-pipelines--backend-object-store-auth"
        source_secret_namespace: "deploykf-minio"
        secret_name: "cloned--kubeflow-pipelines--backend-object-store-auth"
        access_key_key: "access_key"
        secret_key_key: "secret_key"


########################################
## SHARED | deploykf
########################################
deployKF:
  extraManifests:

  clusterDomain: cluster.local

  certManager:
    clusterIssuer:
      selfSigned:
        injectedConfigMapName: "deploykf-gateway-issuer-root-ca-cert"

  auth:
    namespace: "deploykf-auth"

  gateway:
    namespace: "deploykf-istio-gateway"
    serviceAccount: "deploykf-gateway"
    name: "deploykf-gateway"
    hostname: "deploykf.example.com"
    tls:
      enabled: true

  pipelines:
    bucket:
      name: "kubeflow-pipelines"
      region: ""
    objectStore:
      auth:
        fromEnv: false


########################################
## COMPONENT | workflow-controller
########################################
controller:
  ## configs for the argo workflow-controller container image
  ##
  image:
    repository: "quay.io/argoproj/workflow-controller"
    tag: "v3.3.10"
    pullPolicy: "IfNotPresent"
    pullSecret: ""
    uid: 8737
    gid: 8737

  ## configs for the argo executor container image
  ##
  executorImage:
    repository: "quay.io/argoproj/argoexec"
    tag: "v3.3.10"
    pullPolicy: "IfNotPresent"

  ## resource requests/limits for the argo workflow-controller Pods
  ## - spec for ResourceRequirements:
  ##   https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#resourcerequirements-v1-core
  ##
  resources: {}

  ## configs for the service account used by argo workflow controller
  ##
  serviceAccount:
    create: true
    name: "argo-workflow-controller"
    annotations: {}

  ## configs for the default artifact repository
  ##
  artifactRepository:

    ## a format pattern to define how artifacts will be organized in the bucket
    ##
    keyFormat: "artifacts/{{ workflow.namespace }}/{{ workflow.name }}/{{ workflow.creationTimestamp.Y }}/{{ workflow.creationTimestamp.m }}/{{ workflow.creationTimestamp.d }}/{{ pod.name }}"

  ## configs which restrict aspects of argo workflows
  ##
  restrictions:

    ## the max total parallel workflows that can execute at the same time
    parallelism: ~

    ## the max workflows that can execute at the same time in a namespace
    namespaceParallelism: ~


########################################
## COMPONENT | argo-server
########################################
server:
  ## configs for the argo-server container image
  ##
  image:
    repository: "quay.io/argoproj/argocli"
    tag: "v3.4.8"
    pullPolicy: "IfNotPresent"
    pullSecret: ""
    uid: 8737
    gid: 8737

  ## resource requests/limits for the argo-server Pods
  ## - spec for ResourceRequirements:
  ##   https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#resourcerequirements-v1-core
  ##
  resources: {}

  ## configs for the service account used by argo server
  ##
  serviceAccount:
    create: true
    name: "argo-server"
    annotations: {}

  ## identity configs for argo-server
  ##
  identity:

    ## how long each session (JWT issued by argo) is valid for
    ##
    ## TODO: argo-server does not currently support refresh tokens: https://github.com/argoproj/argo-workflows/issues/5053
    sessionExpiry: "2h"

    ## OpenID configs for argo-server
    ##
    openid:
      clientId: "argo-server"
      clientSecret:
        value: "bbbbbbbbbbbbbbbb"
        existingSecret: "cloned--argo-server-openid-secret"
        existingSecretKey: "client_secret"