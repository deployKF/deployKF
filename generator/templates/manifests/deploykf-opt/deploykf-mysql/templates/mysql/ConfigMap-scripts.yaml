apiVersion: v1
kind: ConfigMap
metadata:
  name: deploykf-mysql-scripts
  labels:
    helm.sh/chart: {{ include "deploykf-mysql.labels.chart" . }}
    app.kubernetes.io/name: {{ include "deploykf-mysql.labels.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: mysql
data:
  custom_entrypoint.sh: |
    #!/bin/bash

    set -euo pipefail

    ## DESCRIPTION:
    ## - this script replaces the container entrypoint so is run each pod restart before the default entrypoint
    ## - this script generates a mysql `init_file` to:
    ##    - update the "root" and "kubeflow" user passwords
    ##    - create the kubeflow databases
    ##    - grant the "kubeflow" user admin access on the kubeflow databases
    ## - we encode the username/password with base64 so that special characters don't have to be escaped

    ## update 'root'@'localhost' user
    ROOT_PASSWORD_BASE64="$(echo -n "$MYSQL_ROOT_PASSWORD" | base64 -w0)"
    echo "-- update root user" > /docker-entrypoint-initdb.d/init.sql
    echo "SET @escaped_root_password = QUOTE(CONVERT(FROM_BASE64('$ROOT_PASSWORD_BASE64') USING utf8mb4));" >> /docker-entrypoint-initdb.d/init.sql
    echo "SET @alter_stmt_string = CONCAT(\"ALTER USER 'root'@'localhost' IDENTIFIED BY \", @escaped_root_password);" >> /docker-entrypoint-initdb.d/init.sql
    echo "PREPARE alter_stmt FROM @alter_stmt_string;" >> /docker-entrypoint-initdb.d/init.sql
    echo "EXECUTE alter_stmt;" >> /docker-entrypoint-initdb.d/init.sql
    echo "DEALLOCATE PREPARE alter_stmt;" >> /docker-entrypoint-initdb.d/init.sql

    ## update 'kubeflow'@'%' user
    KUBEFLOW_USERNAME_BASE64="$(echo -n "$MYSQL_KUBEFLOW_USERNAME" | base64 -w0)"
    KUBEFLOW_PASSWORD_BASE64="$(echo -n "$MYSQL_KUBEFLOW_PASSWORD" | base64 -w0)"
    echo "" >> /docker-entrypoint-initdb.d/init.sql
    echo "-- update kubeflow user" >> /docker-entrypoint-initdb.d/init.sql
    echo "SET @escaped_kubeflow_username = QUOTE(CONVERT(FROM_BASE64('$KUBEFLOW_USERNAME_BASE64') USING utf8mb4));" >> /docker-entrypoint-initdb.d/init.sql
    echo "SET @escaped_kubeflow_password = QUOTE(CONVERT(FROM_BASE64('$KUBEFLOW_PASSWORD_BASE64') USING utf8mb4));" >> /docker-entrypoint-initdb.d/init.sql
    echo "SET @create_stmt_string = CONCAT('CREATE USER IF NOT EXISTS ', @escaped_kubeflow_username, \"@'%' IDENTIFIED BY \", @escaped_kubeflow_password);" >> /docker-entrypoint-initdb.d/init.sql
    echo "SET @alter_stmt_string = CONCAT('ALTER USER ', @escaped_kubeflow_username, \"@'%' IDENTIFIED BY \", @escaped_kubeflow_password);" >> /docker-entrypoint-initdb.d/init.sql
    echo "PREPARE create_stmt FROM @create_stmt_string;" >> /docker-entrypoint-initdb.d/init.sql
    echo "PREPARE alter_stmt FROM @alter_stmt_string;" >> /docker-entrypoint-initdb.d/init.sql
    echo "EXECUTE create_stmt;" >> /docker-entrypoint-initdb.d/init.sql
    echo "EXECUTE alter_stmt;" >> /docker-entrypoint-initdb.d/init.sql
    echo "DEALLOCATE PREPARE create_stmt;" >> /docker-entrypoint-initdb.d/init.sql
    echo "DEALLOCATE PREPARE alter_stmt;" >> /docker-entrypoint-initdb.d/init.sql

    ## create databases and grant access by kubeflow user
    {{- if .Values.mysql.databases }}
    echo "" >> /docker-entrypoint-initdb.d/init.sql
    echo "-- create databases and grant access by kubeflow user" >> /docker-entrypoint-initdb.d/init.sql
    {{- range $database := .Values.mysql.databases }}
    echo 'CREATE DATABASE IF NOT EXISTS `{{ $database.name | replace "`" "``" }}`;' >> /docker-entrypoint-initdb.d/init.sql
    echo "SET @database_name = CONVERT(FROM_BASE64('{{ $database.name | replace "`" "``" | b64enc }}') USING utf8mb4);" >> /docker-entrypoint-initdb.d/init.sql
    echo 'SET @grant_stmt_string = CONCAT("GRANT ALL PRIVILEGES ON `", @database_name, "`.* TO ", @escaped_kubeflow_username,' "\"@'%'\");" >> /docker-entrypoint-initdb.d/init.sql
    echo "PREPARE grant_stmt FROM @grant_stmt_string;" >> /docker-entrypoint-initdb.d/init.sql
    echo "EXECUTE grant_stmt;" >> /docker-entrypoint-initdb.d/init.sql
    echo "DEALLOCATE PREPARE grant_stmt;" >> /docker-entrypoint-initdb.d/init.sql
    {{- end }}
    {{- end }}

    echo "ENTRYPOINT - successfully generated 'init_file' at: /docker-entrypoint-initdb.d/init.sql"

    ## because our script is under `/docker-entrypoint-initdb.d/` the mysql docker image will apply it
    ## automatically on the first run (when no db has been initialized), but all subsequent runs require
    ## us to specify it as the `--init-file` arg
    MYSQL_DATADIR="/var/lib/mysql"
    if [ -d "$MYSQL_DATADIR/mysql" ]; then
        echo "ENTRYPOINT - database already initialized, starting mysql..."
        exec /entrypoint.sh mysqld --init-file=/docker-entrypoint-initdb.d/init.sql
    else
        echo "ENTRYPOINT - database not yet initialized, starting mysql..."
        exec /entrypoint.sh mysqld
    fi
