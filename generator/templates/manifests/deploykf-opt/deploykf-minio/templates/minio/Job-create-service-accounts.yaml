{{- if .Values.minio.rootUser.serviceAccounts }}
apiVersion: batch/v1
kind: Job
metadata:
  name: deploykf-minio-create-service-accounts
  namespace: {{ .Release.Namespace | quote }}
  labels:
    helm.sh/chart: {{ include "deploykf-minio.labels.chart" . }}
    app.kubernetes.io/name: {{ include "deploykf-minio.labels.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: minio
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "deploykf-minio.labels.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/component: minio
    spec:
      restartPolicy: OnFailure
      {{- if or .Values.minio.mcImage.pullSecret .Values.minio.kubectlImage.pullSecret }}
      imagePullSecrets:
        {{- if .Values.minio.mcImage.pullSecret }}
        - name: {{ .Values.minio.mcImage.pullSecret | quote }}
        {{- end }}
        {{- if .Values.minio.kubectlImage.pullSecret }}
        - name: {{ .Values.minio.kubectlImage.pullSecret | quote }}
        {{- end }}
      {{- end }}
      nodeSelector: {}
      affinity: {}
      tolerations: []
      serviceAccountName: deploykf-minio-jobs
      securityContext: {}
      initContainers:
        - name: copy-kubectl
          image: {{ .Values.minio.kubectlImage.repository }}:{{ .Values.minio.kubectlImage.tag }}
          imagePullPolicy: {{ .Values.minio.kubectlImage.pullPolicy }}
          securityContext:
            runAsUser: {{ .Values.minio.kubectlImage.uid }}
            runAsGroup: {{ .Values.minio.kubectlImage.gid }}
          command:
            - "/bin/sh"
            - "-c"
          args:
            - |
              echo "copying kubectl binary to shared volume...";
              cp -f "$(which kubectl)" /shared-bin/kubectl;
          volumeMounts:
            - name: shared-bin
              mountPath: "/shared-bin/"
      containers:
        - name: create-service-accounts
          image: {{ .Values.minio.mcImage.repository }}:{{ .Values.minio.mcImage.tag }}
          imagePullPolicy: {{ .Values.minio.image.pullPolicy }}
          securityContext:
            runAsUser: {{ .Values.minio.mcImage.uid }}
            runAsGroup: {{ .Values.minio.mcImage.gid }}
          command:
            - "/job-scripts/create_service_accounts.sh"
          args: []
          env:
            ## minio - root credentials
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  {{- if .Values.minio.rootUser.existingSecret }}
                  name: {{ .Values.minio.rootUser.existingSecret | quote }}
                  key: {{ .Values.minio.rootUser.existingSecretUsernameKey | quote }}
                  {{- else }}
                  name: deploykf-minio-root-user
                  key: username
                  {{- end }}
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if .Values.minio.rootUser.existingSecret }}
                  name: {{ .Values.minio.rootUser.existingSecret | quote }}
                  key: {{ .Values.minio.rootUser.existingSecretPasswordKey | quote }}
                  {{- else }}
                  name: deploykf-minio-root-user
                  key: password
                  {{- end }}
            {{- range $index, $sa := .Values.minio.rootUser.serviceAccounts }}
            - name: {{ printf "SA__%d__POLICY_JSON" $index | quote }}
              valueFrom:
                secretKeyRef:
                  name: deploykf-minio-root-user-service-accounts
                  key: {{ printf "%d_policy_json" $index | quote }}
            {{- if not $sa.generateSecret }}
            - name: {{ printf "SA__%d__ACCESS_KEY" $index | quote }}
              valueFrom:
                secretKeyRef:
                  {{- if $sa.existingSecret }}
                  name: {{ $sa.existingSecret | quote }}
                  key: {{ $sa.existingSecretAccessKeyKey | default "access_key" | quote }}
                  {{- else }}
                  name: deploykf-minio-root-user-service-accounts
                  key: {{ printf "%d_access_key" $index | quote }}
                  {{- end }}
            - name: {{ printf "SA__%d__SECRET_KEY" $index | quote }}
              valueFrom:
                secretKeyRef:
                  {{- if $sa.existingSecret }}
                  name: {{ $sa.existingSecret | quote }}
                  key: {{ $sa.existingSecretSecretKeyKey | default "secret_key" | quote }}
                  {{- else }}
                  name: deploykf-minio-root-user-service-accounts
                  key: {{ printf "%d_secret_key" $index | quote }}
                  {{- end }}
            {{- end }}
            {{- end }}
          volumeMounts:
            - name: job-scripts
              mountPath: "/job-scripts/"
            - name: mc-config
              ## we must mount a writable volume at the `/.mc/` path so that the `mc` command can store its configs
              mountPath: "/.mc/"
            - name: shared-bin
              mountPath: "/usr/local/bin/kubectl"
              subPath: "kubectl"
            {{- if .Values.deployKF_helpers.deploykf_gateway.is_self_signed_cert }}
            - name: gateway-root-ca-cert
              mountPath: "/.mc/certs/CAs/"
              readOnly: true
            {{- end }}
      volumes:
        - name: job-scripts
          configMap:
            name: deploykf-minio-scripts
            items:
              - key: create_service_accounts.sh
                path: create_service_accounts.sh
                mode: 0755
        - name: mc-config
          emptyDir: {}
        - name: shared-bin
          emptyDir: {}
        {{- if .Values.deployKF_helpers.deploykf_gateway.is_self_signed_cert }}
        - name: gateway-root-ca-cert
          configMap:
            name: {{ .Values.deployKF.certManager.clusterIssuer.selfSigned.injectedConfigMapName | quote }}
            items:
              - key: root-cert.pem
                path: root-cert.pem
        {{- end }}
{{- end }}